---
- name: "remove existing apacheds installation"
  when: apacheds_server_installer_enabled
  become_user: "{{hosting_username}}"
  file: path="{{apacheds_home}}" state=absent

# for raw apacheds
#- name: download apacheds
#  tags: [apacheds-all, apacheds-server, smart-platform]
#  become_user: "{{hosting_username}}"
#  get_url: url={{apacheds_artifact_url}} dest={{hosting_user_home}}
#
#- name: extract apacheds
#  tags: [apacheds-all, apacheds-server, smart-platform]
#  become_user: "{{hosting_username}}"
#  unarchive: src="{{hosting_user_home}}/{{apacheds_artifact_name}}" dest="{{hosting_user_home}}" copy=no
#
#- name: setenv.sh properties
#  tags: [apacheds-all, apacheds-server, smart-platform]
#  template: src=setenv.sh.j2 dest="{{apacheds_home}}/bin/setenv.sh" owner="{{hosting_username}}" group="{{hosting_username}}" mode=0744
#
- name: "extract configured apacheds"
  when: apacheds_server_installer_enabled
  become_user: "{{hosting_username}}"
  unarchive: src="apacheds-2.0.0-M23-configured.tar" dest="{{hosting_user_home}}"

- name: "configure apacheds-server service"
  when: apacheds_server_installer_enabled
  template: src=apacheds-server.service.j2
            dest=/etc/systemd/system/apacheds-server.service
            owner=root group=root mode=0644

- name: "enable apacheds-server service"
  when: apacheds_server_installer_enabled
  shell: systemctl enable apacheds-server.service

- name: "reload systemd daemon"
  when: apacheds_server_installer_enabled
  shell: systemctl daemon-reload

- name: "stop apacheds-server"
  when: apacheds_server_installer_enabled
  service: name=apacheds-server state=stopped

- meta: flush_handlers

- name: "restart apacheds-server"
  when: apacheds_server_installer_enabled
  service: name=apacheds-server enabled=yes state=restarted

- name: "verify apacheds-server is available"
  when: apacheds_server_installer_enabled
  wait_for: host=localhost port={{apacheds_server_internal_port}}

- name: "generate sandbox admin update script"
  when: apacheds_server_installer_enabled
  become_user: "{{hosting_username}}"
  template: src="update-sandbox-admin-password.ldif.j2"
            dest="{{apacheds_home}}/update-sandbox-admin-password.ldif"

- name: "update sandbox admin"
  when: apacheds_server_installer_enabled
  become_user: "{{hosting_username}}"
  shell: chdir={{apacheds_home}}
         ldapadd
           -h {{apacheds_server_external_host}}
           -p {{apacheds_server_external_port}}
           -x -D {{apacheds_server_system_admin_dn}}
           -w {{apacheds_server_system_admin_initial_password}}
           -f update-sandbox-admin-password.ldif
  failed_when: False

- name: "generate sandbox demo update script"
  when: apacheds_server_installer_enabled
  become_user: "{{hosting_username}}"
  template: src="update-sandbox-demo-password.ldif.j2"
            dest="{{apacheds_home}}/update-sandbox-demo-password.ldif"

- name: "update sandbox demo"
  when: apacheds_server_installer_enabled
  become_user: "{{hosting_username}}"
  shell: chdir={{apacheds_home}}
         ldapadd
           -h {{apacheds_server_external_host}}
           -p {{apacheds_server_external_port}}
           -x -D {{apacheds_server_system_admin_dn}}
           -w {{apacheds_server_system_admin_initial_password}}
           -f update-sandbox-demo-password.ldif
  failed_when: False

